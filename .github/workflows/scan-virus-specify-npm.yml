# $<Schema>$ https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: "Scan Virus - Specify NPM Packages"
on:
  workflow_dispatch:
    inputs:
      target:
        description: "{string} Target."
        required: true
      cache:
        description: "{boolean} Cache data."
        required: false
        default: "true"
jobs:
  parse-inputs:
    name: "(Parse Inputs)"
    runs-on: "ubuntu-latest"
    steps:
      - run: |
          [string[]]$NPMPackages = '${{github.event.inputs.target}}'.Trim() -split '[\s,;]+'
          [string[]]$NPMPackagesURL = @()
          foreach ($NPMPackage in $NPMPackages) {
            [string]$NPMPackageName = $NPMPackage -replace '^(?:https?:\/\/)?(?:www\.)?npmjs\.com\/package\/', ''
            $NPMRegistryResponse = $null
            try {
              $NPMRegistryResponse = Invoke-WebRequest -Method Get -Uri "https://registry.npmjs.org/$NPMPackageName" -UseBasicParsing
            } catch {
              Write-Warning -Message "NPM package ``$PackageName``` not found!`n$($_.Exception.Message)"
              continue
            }
            [pscustomobject]$NPMPackageContent = $NPMRegistryResponse.Content | ConvertFrom-Json -Depth 100 -ErrorAction Stop
            $NPMPackageContent.versions.PSObject.Properties | ForEach-Object -Process {
              $NPMPackagesURL += $_.Value.dist.tarball
            }
          }
          if ($NPMPackagesURL.Length -gt 0) {
            Write-Host -Object "::set-output name=target::$($NPMPackagesURL -join ";")"
          } else {
            throw 'No URL resolved!'
          }
        id: "parser"
        shell: "pwsh"
    outputs:
      target: "${{steps.parser.outputs.target}}"
  scan-virus-specify-npm-packages:
    name: "Scan Virus - Specify NPM Packages"
    runs-on: "ubuntu-latest"
    needs:
      - "parse-inputs"
    steps:
      - name: "Scan NPM Packages"
        uses: "hugoalh/scan-virus-ghaction@main"
        with:
          target: "${{needs.parse-inputs.outputs.target}}"
          cache: "${{github.event.inputs.cache}}"
